<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Cavendish.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Cavendish.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri May 05 22:02:54 2023
<BR><P>
<H3>Maximum Stack Usage =        204 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
OTGFS1_IRQHandler &rArr; usbd_irq_handler &rArr; usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2f]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[17]">BusFault_Handler</a> from at32f415_int.o(i.BusFault_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[31]">CAN1_RX0_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[32]">CAN1_RX1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[33]">CAN1_SE_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[30]">CAN1_TX_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[51]">CMP1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[52]">CMP2_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[57]">CRC16_CCITT_CalculateBuf</a> from check_crc16.o(i.CRC16_CCITT_CalculateBuf) referenced from api.o(i.API_Index)
 <LI><a href="#[22]">CRM_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[28]">DMA1_Channel1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[29]">DMA1_Channel2_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel3_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel4_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel5_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel6_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel7_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel2_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel3_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel4_5_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[53]">DMA2_Channel6_7_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[1a]">DebugMon_Handler</a> from at32f415_int.o(i.DebugMon_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[61]">Debug_Out</a> from mode.o(i.Debug_Out) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[46]">ERTCAlarm_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[20]">ERTC_WKUP_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[23]">EXINT0_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[45]">EXINT15_10_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[24]">EXINT1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[25]">EXINT2_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[26]">EXINT3_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[27]">EXINT4_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[34]">EXINT9_5_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[21]">FLASH_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[5b]">Find_Data</a> from data_handle.o(i.Find_Data) referenced from api.o(i.API_Index)
 <LI><a href="#[6f]">Get_Lose_Tiem</a> from mode_time.o(i.Get_Lose_Tiem) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[6d]">Get_TIME</a> from mode_time.o(i.Get_TIME) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[15]">HardFault_Handler</a> from at32f415_int.o(i.HardFault_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[58]">Hourly_to_Seconds</a> from time_handle.o(i.Hourly_to_Seconds) referenced from api.o(i.API_Index)
 <LI><a href="#[3d]">I2C1_ERR_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[3c]">I2C1_EVT_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[3f]">I2C2_ERR_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[3e]">I2C2_EVT_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[60]">KEY_Init</a> from key.o(i.KEY_Init) referenced from mode.o(i.Mode_Index)
 <LI><a href="#[72]">KEY_State</a> from key.o(i.KEY_State) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[65]">LCD_Draw_Circle</a> from lcd.o(i.LCD_Draw_Circle) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[64]">LCD_Draw_Line</a> from lcd.o(i.LCD_Draw_Line) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[63]">LCD_Draw_Point</a> from lcd.o(i.LCD_Draw_Point) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[66]">LCD_Draw_Rectangle</a> from lcd.o(i.LCD_Draw_Rectangle) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[62]">LCD_Fill</a> from lcd.o(i.LCD_Fill) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[5f]">LCD_Init</a> from lcd.o(i.LCD_Init) referenced from mode.o(i.Mode_Index)
 <LI><a href="#[68]">LCD_Show_Chinese</a> from lcd.o(i.LCD_Show_Chinese) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[69]">LCD_Show_Picture</a> from lcd.o(i.LCD_Show_Picture) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[67]">LCD_Show_String</a> from lcd.o(i.LCD_Show_String) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[16]">MemManage_Handler</a> from at32f415_int.o(i.MemManage_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[14]">NMI_Handler</a> from at32f415_int.o(i.NMI_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[50]">OTGFS1_IRQHandler</a> from usb_user.o(i.OTGFS1_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[47]">OTGFS1_WKUP_IRQHandler</a> from usb_user.o(i.OTGFS1_WKUP_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[5a]">Over_Time</a> from time_handle.o(i.Over_Time) referenced from api.o(i.API_Index)
 <LI><a href="#[1e]">PVM_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[1b]">PendSV_Handler</a> from at32f415_int.o(i.PendSV_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[13]">Reset_Handler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[48]">SDIO1_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from base_spi.o(i.SPI1_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from base_spi.o(i.SPI2_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[19]">SVC_Handler</a> from at32f415_int.o(i.SVC_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[6c]">SYS_Delay_S</a> from base_sys_time.o(i.SYS_Delay_S) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[6b]">SYS_Delay_ms</a> from base_sys_time.o(i.SYS_Delay_ms) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[6a]">SYS_Delay_us</a> from base_sys_time.o(i.SYS_Delay_us) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[59]">Seconds_to_Hourly</a> from time_handle.o(i.Seconds_to_Hourly) referenced from api.o(i.API_Index)
 <LI><a href="#[6e]">Set_TIME</a> from mode_time.o(i.Set_TIME) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[1c]">SysTick_Handler</a> from base_sys_time.o(i.SysTick_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[5c]">Sys_Clock_Init</a> from mode_time.o(i.Sys_Clock_Init) referenced from mode.o(i.Mode_Index)
 <LI><a href="#[55]">SystemInit</a> from system_at32f415.o(i.SystemInit) referenced from startup_at32f415.o(.text)
 <LI><a href="#[1f]">TAMP_STAMP_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[35]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[38]">TMR1_CH_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[36]">TMR1_OVF_TMR10_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[37]">TMR1_TRG_HALL_TMR11_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[39]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[3a]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[3b]">TMR4_GLOBAL_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[49]">TMR5_GLOBAL_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[4a]">UART4_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[4b]">UART5_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[70]">UART_Send_Data</a> from mode_uart.o(i.UART_Send_Data) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[71]">UART_Send_String</a> from mode_uart.o(i.UART_Send_String) referenced from mode.o(i.Mode_User_index)
 <LI><a href="#[42]">USART1_IRQHandler</a> from mode_uart.o(i.USART1_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from mode_uart.o(i.USART2_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[44]">USART3_IRQHandler</a> from mode_uart.o(i.USART3_IRQHandler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[5e]">USB_User_init</a> from usb_user.o(i.USB_User_init) referenced from mode.o(i.Mode_Index)
 <LI><a href="#[5d]">Uart_Init</a> from mode_uart.o(i.Uart_Init) referenced from mode.o(i.Mode_Index)
 <LI><a href="#[18]">UsageFault_Handler</a> from at32f415_int.o(i.UsageFault_Handler) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[1d]">WWDT_IRQHandler</a> from startup_at32f415.o(.text) referenced from startup_at32f415.o(RESET)
 <LI><a href="#[56]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_at32f415.o(.text)
 <LI><a href="#[1]">class_clear_handler</a> from cdc_keyboard_class.o(i.class_clear_handler) referenced 2 times from cdc_keyboard_class.o(.data)
 <LI><a href="#[4]">class_ept0_rx_handler</a> from cdc_keyboard_class.o(i.class_ept0_rx_handler) referenced 2 times from cdc_keyboard_class.o(.data)
 <LI><a href="#[3]">class_ept0_tx_handler</a> from cdc_keyboard_class.o(i.class_ept0_tx_handler) referenced 2 times from cdc_keyboard_class.o(.data)
 <LI><a href="#[8]">class_event_handler</a> from cdc_keyboard_class.o(i.class_event_handler) referenced 2 times from cdc_keyboard_class.o(.data)
 <LI><a href="#[5]">class_in_handler</a> from cdc_keyboard_class.o(i.class_in_handler) referenced 2 times from cdc_keyboard_class.o(.data)
 <LI><a href="#[0]">class_init_handler</a> from cdc_keyboard_class.o(i.class_init_handler) referenced 2 times from cdc_keyboard_class.o(.data)
 <LI><a href="#[6]">class_out_handler</a> from cdc_keyboard_class.o(i.class_out_handler) referenced 2 times from cdc_keyboard_class.o(.data)
 <LI><a href="#[2]">class_setup_handler</a> from cdc_keyboard_class.o(i.class_setup_handler) referenced 2 times from cdc_keyboard_class.o(.data)
 <LI><a href="#[7]">class_sof_handler</a> from cdc_keyboard_class.o(i.class_sof_handler) referenced 2 times from cdc_keyboard_class.o(.data)
 <LI><a href="#[73]">fputc</a> from base_uart.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[12]">get_device_config_string</a> from cdc_keyboard_desc.o(i.get_device_config_string) referenced 2 times from cdc_keyboard_desc.o(.data)
 <LI><a href="#[b]">get_device_configuration</a> from cdc_keyboard_desc.o(i.get_device_configuration) referenced 2 times from cdc_keyboard_desc.o(.data)
 <LI><a href="#[9]">get_device_descriptor</a> from cdc_keyboard_desc.o(i.get_device_descriptor) referenced 2 times from cdc_keyboard_desc.o(.data)
 <LI><a href="#[11]">get_device_interface_string</a> from cdc_keyboard_desc.o(i.get_device_interface_string) referenced 2 times from cdc_keyboard_desc.o(.data)
 <LI><a href="#[d]">get_device_lang_id</a> from cdc_keyboard_desc.o(i.get_device_lang_id) referenced 2 times from cdc_keyboard_desc.o(.data)
 <LI><a href="#[e]">get_device_manufacturer_string</a> from cdc_keyboard_desc.o(i.get_device_manufacturer_string) referenced 2 times from cdc_keyboard_desc.o(.data)
 <LI><a href="#[c]">get_device_other_speed</a> from cdc_keyboard_desc.o(i.get_device_other_speed) referenced 2 times from cdc_keyboard_desc.o(.data)
 <LI><a href="#[f]">get_device_product_string</a> from cdc_keyboard_desc.o(i.get_device_product_string) referenced 2 times from cdc_keyboard_desc.o(.data)
 <LI><a href="#[a]">get_device_qualifier</a> from cdc_keyboard_desc.o(i.get_device_qualifier) referenced 2 times from cdc_keyboard_desc.o(.data)
 <LI><a href="#[10]">get_device_serial_string</a> from cdc_keyboard_desc.o(i.get_device_serial_string) referenced 2 times from cdc_keyboard_desc.o(.data)
 <LI><a href="#[54]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[56]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[74]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[79]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[128]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[129]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12b]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[12c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[12d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ERTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ERTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXINT15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXINT9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SDIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TMR1_OVF_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TMR1_TRG_HALL_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SysTick
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TIME
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>

<P><STRONG><a name="[aa]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_String
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[12f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[130]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[131]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>API_Index</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, api.o(i.API_Index))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
</UL>

<P><STRONG><a name="[17]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_int.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>CRC16_CCITT_CalateByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, check_crc16.o(i.CRC16_CCITT_CalateByte))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_CCITT_CalculateBuf
</UL>

<P><STRONG><a name="[57]"></a>CRC16_CCITT_CalculateBuf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, check_crc16.o(i.CRC16_CCITT_CalculateBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16_CCITT_CalculateBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_CCITT_CalateByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api.o(i.API_Index)
</UL>
<P><STRONG><a name="[1a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f415_int.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>Debug_Out</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mode.o(i.Debug_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Debug_Out &rArr; UART_Send_String &rArr; UART_Send_Data &rArr; UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[5b]"></a>Find_Data</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, data_handle.o(i.Find_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Find_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api.o(i.API_Index)
</UL>
<P><STRONG><a name="[7b]"></a>GET_SysTick</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, base_sys_time.o(i.GET_SysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GET_SysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay_us
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay_ms
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TIME
</UL>

<P><STRONG><a name="[6f]"></a>Get_Lose_Tiem</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mode_time.o(i.Get_Lose_Tiem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Get_Lose_Tiem &rArr; Get_TIME &rArr; Set_TIME &rArr; SET_SysTick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TIME
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[6d]"></a>Get_TIME</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, mode_time.o(i.Get_TIME))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_TIME &rArr; Set_TIME &rArr; SET_SysTick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_SysTick
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seconds_to_Hourly
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TIME
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Lose_Tiem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_int.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>Hourly_to_Seconds</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, time_handle.o(i.Hourly_to_Seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Hourly_to_Seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Over_Time
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TIME
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api.o(i.API_Index)
</UL>
<P><STRONG><a name="[7c]"></a>KEY_GPIO_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, base_exist_gpio.o(i.KEY_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEY_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[60]"></a>KEY_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = KEY_Init &rArr; KEY_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_Index)
</UL>
<P><STRONG><a name="[72]"></a>KEY_State</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, key.o(i.KEY_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_State
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[81]"></a>LCD_Address_Set</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, lcd.o(i.LCD_Address_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Picture
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Char
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>

<P><STRONG><a name="[65]"></a>LCD_Draw_Circle</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, lcd.o(i.LCD_Draw_Circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_Draw_Circle &rArr; LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[64]"></a>LCD_Draw_Line</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, lcd.o(i.LCD_Draw_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_Draw_Line &rArr; LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Rectangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[63]"></a>LCD_Draw_Point</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd.o(i.LCD_Draw_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Char
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Line
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[66]"></a>LCD_Draw_Rectangle</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lcd.o(i.LCD_Draw_Rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_Draw_Rectangle &rArr; LCD_Draw_Line &rArr; LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[62]"></a>LCD_Fill</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lcd.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Fill &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[84]"></a>LCD_GPIO_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, base_exist_gpio.o(i.LCD_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[5f]"></a>LCD_Init</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_Init &rArr; LCD_Fill &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_CMD
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_Index)
</UL>
<P><STRONG><a name="[88]"></a>LCD_Show_Char</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, lcd.o(i.LCD_Show_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_Show_Char &rArr; LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_String
</UL>

<P><STRONG><a name="[68]"></a>LCD_Show_Chinese</STRONG> (Thumb, 88 bytes, Stack size 44 bytes, lcd.o(i.LCD_Show_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Show_Chinese &rArr; LCD_Show_Chinese32x32
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Chinese32x32
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Chinese24x24
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[89]"></a>LCD_Show_Chinese24x24</STRONG> (Thumb, 8 bytes, Stack size 16 bytes, lcd.o(i.LCD_Show_Chinese24x24))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Show_Chinese24x24
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Chinese
</UL>

<P><STRONG><a name="[8a]"></a>LCD_Show_Chinese32x32</STRONG> (Thumb, 8 bytes, Stack size 16 bytes, lcd.o(i.LCD_Show_Chinese32x32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Show_Chinese32x32
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Chinese
</UL>

<P><STRONG><a name="[69]"></a>LCD_Show_Picture</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, lcd.o(i.LCD_Show_Picture))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_Show_Picture &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[67]"></a>LCD_Show_String</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lcd.o(i.LCD_Show_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LCD_Show_String &rArr; LCD_Show_Char &rArr; LCD_Draw_Point &rArr; LCD_Address_Set &rArr; LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[82]"></a>LCD_WR_CMD</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WR_CMD &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[83]"></a>LCD_WR_DATA</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WR_DATA &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Char
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[87]"></a>LCD_WR_DATA8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_DATA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WR_DATA8 &rArr; LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Picture
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[8c]"></a>LCD_Writ_Bus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i.LCD_Writ_Bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Writ_Bus &rArr; SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_CMD
</UL>

<P><STRONG><a name="[8e]"></a>Main_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(i.Main_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Main_Init &rArr; system_clock_config &rArr; system_clock_hext_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Index
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Index
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_int.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>Mode_Index</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mode.o(i.Mode_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mode_Index
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_User_index
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
</UL>

<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f415_int.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTGFS1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_user.o(i.OTGFS1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = OTGFS1_IRQHandler &rArr; usbd_irq_handler &rArr; usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>OTGFS1_WKUP_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_user.o(i.OTGFS1_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OTGFS1_WKUP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Over_Time</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, time_handle.o(i.Over_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Over_Time &rArr; Hourly_to_Seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hourly_to_Seconds
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api.o(i.API_Index)
</UL>
<P><STRONG><a name="[1b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f415_int.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>SET_SysTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, base_sys_time.o(i.SET_SysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SET_SysTick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TIME
</UL>

<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, base_spi.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>SPI2_GPIO_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, base_spi.o(i.SPI2_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI2_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, base_spi.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>SPI_CS_Set</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, base_spi.o(i.SPI_CS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_CMD
</UL>

<P><STRONG><a name="[8d]"></a>SPI_Send_DATA</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, base_spi.o(i.SPI_Send_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Send_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>

<P><STRONG><a name="[85]"></a>SPI_Start_Init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, base_spi.o(i.SPI_Start_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI_Start_Init &rArr; SPI2_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_default_para_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GPIO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[19]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f415_int.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SYS_Delay_S</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, base_sys_time.o(i.SYS_Delay_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SYS_Delay_S &rArr; SYS_Delay_ms &rArr; GET_SysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[6b]"></a>SYS_Delay_ms</STRONG> (Thumb, 106 bytes, Stack size 36 bytes, base_sys_time.o(i.SYS_Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYS_Delay_ms &rArr; GET_SysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_SysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay_S
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[6a]"></a>SYS_Delay_us</STRONG> (Thumb, 106 bytes, Stack size 36 bytes, base_sys_time.o(i.SYS_Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYS_Delay_us &rArr; GET_SysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_SysTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[59]"></a>Seconds_to_Hourly</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, time_handle.o(i.Seconds_to_Hourly))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Seconds_to_Hourly
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TIME
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api.o(i.API_Index)
</UL>
<P><STRONG><a name="[6e]"></a>Set_TIME</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mode_time.o(i.Set_TIME))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Set_TIME &rArr; SET_SysTick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SysTick
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hourly_to_Seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TIME
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[1c]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, base_sys_time.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>Sys_Clock_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mode_time.o(i.Sys_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_Clock_Init &rArr; Sys_Time_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Time_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_Index)
</UL>
<P><STRONG><a name="[a1]"></a>Sys_Time_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, base_sys_time.o(i.Sys_Time_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sys_Time_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Clock_Init
</UL>

<P><STRONG><a name="[55]"></a>SystemInit</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, system_at32f415.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>UART_RXD_Flag</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, base_uart.o(i.UART_RXD_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RXD_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>UART_RXD_Flag_Clear</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, base_uart.o(i.UART_RXD_Flag_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RXD_Flag_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>UART_RXD_Receive</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, base_uart.o(i.UART_RXD_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RXD_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>UART_Send_Data</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mode_uart.o(i.UART_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Send_Data &rArr; UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TXD_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[71]"></a>UART_Send_String</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mode_uart.o(i.UART_Send_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Send_String &rArr; UART_Send_Data &rArr; UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_User_index)
</UL>
<P><STRONG><a name="[a9]"></a>UART_TXD_Send</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, base_uart.o(i.UART_TXD_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_Data
</UL>

<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mode_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TXD_Send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Receive
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag_Clear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RXD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mode_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TXD_Send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Receive
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag_Clear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RXD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART3_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mode_uart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TXD_Send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Receive
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag_Clear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RXD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USB_User_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usb_user.o(i.USB_User_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USB_User_init &rArr; usbd_init &rArr; usbd_core_init &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_low_power_wakeup_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_delay_ms
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_Index)
</UL>
<P><STRONG><a name="[b2]"></a>Uart1_Init</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, base_uart.o(i.Uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Uart1_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[ba]"></a>Uart2_Init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, base_uart.o(i.Uart2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Uart2_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[bb]"></a>Uart3_Init</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, base_uart.o(i.Uart3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Uart3_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[bd]"></a>Uart4_Init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, base_uart.o(i.Uart4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Uart4_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[5d]"></a>Uart_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mode_uart.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Uart_Init &rArr; Uart4_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mode.o(i.Mode_Index)
</UL>
<P><STRONG><a name="[18]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_int.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[134]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[93]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
</UL>

<P><STRONG><a name="[135]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[136]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[137]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d8]"></a>crm_ahb_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_ahb_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[da]"></a>crm_apb1_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_apb1_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[d9]"></a>crm_apb2_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_apb2_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[db]"></a>crm_auto_step_mode_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_auto_step_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[d5]"></a>crm_clock_source_enable</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_clock_source_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[ca]"></a>crm_clocks_freq_get</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, at32f415_crm.o(i.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[d6]"></a>crm_flag_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at32f415_crm.o(i.crm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[cd]"></a>crm_hick_divider_select</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_hick_divider_select))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_sclk_frequency_select
</UL>

<P><STRONG><a name="[cc]"></a>crm_hick_sclk_frequency_select</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, at32f415_crm.o(i.crm_hick_sclk_frequency_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_hick_sclk_frequency_select
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_divider_select
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_source_select
</UL>

<P><STRONG><a name="[7e]"></a>crm_periph_clock_enable</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32f415_crm.o(i.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GPIO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_User_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[d2]"></a>crm_periph_reset</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32f415_crm.o(i.crm_periph_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_reset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_reset
</UL>

<P><STRONG><a name="[d7]"></a>crm_pll_config</STRONG> (Thumb, 210 bytes, Stack size 12 bytes, at32f415_crm.o(i.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[d4]"></a>crm_reset</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[dc]"></a>crm_sysclk_switch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_sysclk_switch))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[cb]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>

<P><STRONG><a name="[dd]"></a>crm_usb_clock_div_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32f415_crm.o(i.crm_usb_clock_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[ce]"></a>crm_usb_clock_source_select</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at32f415_crm.o(i.crm_usb_clock_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_usb_clock_source_select &rArr; crm_hick_sclk_frequency_select
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hick_sclk_frequency_select
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[e1]"></a>exint_default_para_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_exint.o(i.exint_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_low_power_wakeup_config
</UL>

<P><STRONG><a name="[96]"></a>exint_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f415_exint.o(i.exint_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTGFS1_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>exint_init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, at32f415_exint.o(i.exint_init))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_low_power_wakeup_config
</UL>

<P><STRONG><a name="[73]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, base_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; UART_TXD_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TXD_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[7d]"></a>gpio_default_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f415_gpio.o(i.gpio_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GPIO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[7f]"></a>gpio_init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, at32f415_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GPIO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[80]"></a>gpio_input_data_bit_read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f415_gpio.o(i.gpio_input_data_bit_read))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State
</UL>

<P><STRONG><a name="[bc]"></a>gpio_pin_remap_config</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, at32f415_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
</UL>

<P><STRONG><a name="[54]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; Main_Init &rArr; system_clock_config &rArr; system_clock_hext_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[9e]"></a>nvic_irq_enable</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, at32f415_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_User_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_low_power_wakeup_config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[90]"></a>nvic_priority_group_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32f415_misc.o(i.nvic_priority_group_config))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[9d]"></a>spi_default_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[a0]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[9b]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_DATA
</UL>

<P><STRONG><a name="[98]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_DATA
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>spi_i2s_interrupt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_i2s_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>spi_i2s_reset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, at32f415_spi.o(i.spi_i2s_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_i2s_reset &rArr; crm_periph_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[9f]"></a>spi_init</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, at32f415_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start_Init
</UL>

<P><STRONG><a name="[8f]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, at32f415_clock.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = system_clock_config &rArr; system_clock_hext_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Init
</UL>

<P><STRONG><a name="[d3]"></a>system_clock_hext_config</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, at32f415_clock.o(i.system_clock_hext_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = system_clock_hext_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_div_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_source_select
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[de]"></a>system_core_clock_update</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, system_at32f415.o(i.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_hext_config
</UL>

<P><STRONG><a name="[a2]"></a>systick_clock_source_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f415_misc.o(i.systick_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Time_Init
</UL>

<P><STRONG><a name="[a8]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Receive
</UL>

<P><STRONG><a name="[ab]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TXD_Send
</UL>

<P><STRONG><a name="[b9]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[a6]"></a>usart_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag_Clear
</UL>

<P><STRONG><a name="[a4]"></a>usart_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TXD_Send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RXD_Flag
</UL>

<P><STRONG><a name="[b4]"></a>usart_init</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, at32f415_usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[b8]"></a>usart_interrupt_enable</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, at32f415_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[b7]"></a>usart_parity_selection_config</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_parity_selection_config))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[b6]"></a>usart_receiver_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[b3]"></a>usart_reset</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, at32f415_usart.o(i.usart_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_reset &rArr; crm_periph_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[b5]"></a>usart_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_usart.o(i.usart_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[ea]"></a>usb_connect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_connect))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
</UL>

<P><STRONG><a name="[114]"></a>usb_core_config</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, usb_core.o(i.usb_core_config))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[b1]"></a>usb_delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_core.o(i.usb_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_delay_ms &rArr; SYS_Delay_ms &rArr; GET_SysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_User_init
</UL>

<P><STRONG><a name="[105]"></a>usb_disconnect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
</UL>

<P><STRONG><a name="[10a]"></a>usb_ept0_setup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_ept0_setup))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enumdone_handler
</UL>

<P><STRONG><a name="[123]"></a>usb_ept0_start</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_ept0_start))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
</UL>

<P><STRONG><a name="[e8]"></a>usb_ept_clear_stall</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, at32f415_usb.o(i.usb_ept_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_stall
</UL>

<P><STRONG><a name="[10b]"></a>usb_ept_close</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, at32f415_usb.o(i.usb_ept_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_close
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_close
</UL>

<P><STRONG><a name="[f0]"></a>usb_ept_default_init</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, usbd_core.o(i.usb_ept_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_default_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[112]"></a>usb_ept_in_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_ept_in_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[111]"></a>usb_ept_in_interrupt</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, at32f415_usb.o(i.usb_ept_in_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_ept_in_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[10c]"></a>usb_ept_open</STRONG> (Thumb, 416 bytes, Stack size 12 bytes, at32f415_usb.o(i.usb_ept_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_ept_open
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_open
</UL>

<P><STRONG><a name="[121]"></a>usb_ept_out_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_ept_out_clear))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[120]"></a>usb_ept_out_interrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_ept_out_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[126]"></a>usb_ept_stall</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, at32f415_usb.o(i.usb_ept_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_stall
</UL>

<P><STRONG><a name="[f5]"></a>usb_flush_rx_fifo</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_flush_rx_fifo))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[f4]"></a>usb_flush_tx_fifo</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, at32f415_usb.o(i.usb_flush_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_flush_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[110]"></a>usb_get_all_in_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_get_all_in_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[11f]"></a>usb_get_all_out_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_get_all_out_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[116]"></a>usb_global_clear_interrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_global_clear_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[115]"></a>usb_global_get_all_interrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_global_get_all_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[df]"></a>usb_global_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at32f415_usb.o(i.usb_global_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_global_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[124]"></a>usb_global_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_global_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_rxflvl_handler
</UL>

<P><STRONG><a name="[e0]"></a>usb_global_reset</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_global_reset))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_init
</UL>

<P><STRONG><a name="[113]"></a>usb_global_select_core</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_global_select_core))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[f2]"></a>usb_global_set_mode</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_global_set_mode))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[f1]"></a>usb_interrupt_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[f7]"></a>usb_interrupt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[f3]"></a>usb_open_phy_clk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_open_phy_clk))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_wakeup_handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[125]"></a>usb_read_packet</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, at32f415_usb.o(i.usb_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_rxflvl_handler
</UL>

<P><STRONG><a name="[122]"></a>usb_set_address</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_set_address))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
</UL>

<P><STRONG><a name="[10d]"></a>usb_set_rx_fifo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_set_rx_fifo))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
</UL>

<P><STRONG><a name="[10e]"></a>usb_set_tx_fifo</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, at32f415_usb.o(i.usb_set_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_set_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
</UL>

<P><STRONG><a name="[108]"></a>usb_stop_phy_clk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_stop_phy_clk))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enter_suspend
</UL>

<P><STRONG><a name="[107]"></a>usb_suspend_status_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f415_usb.o(i.usb_suspend_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enter_suspend
</UL>

<P><STRONG><a name="[e3]"></a>usb_write_empty_txfifo</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usbd_int.o(i.usb_write_empty_txfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usb_write_empty_txfifo &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[e4]"></a>usb_write_packet</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, at32f415_usb.o(i.usb_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_empty_txfifo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
</UL>

<P><STRONG><a name="[e7]"></a>usbd_clear_stall</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_clear_stall &rArr; usb_ept_clear_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
</UL>

<P><STRONG><a name="[e9]"></a>usbd_connect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[eb]"></a>usbd_core_in_handler</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_core_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usbd_core_in_handler &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv_status
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[ee]"></a>usbd_core_init</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, usbd_core.o(i.usbd_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usbd_core_init &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_open_phy_clk
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_enable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_disable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_set_mode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_tx_fifo
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_rx_fifo
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_default_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[f8]"></a>usbd_core_out_handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_core_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_core_out_handler &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[f9]"></a>usbd_core_setup_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_core_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_parse
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_interface_request
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[c9]"></a>usbd_ctrl_recv</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, usbd_core.o(i.usbd_ctrl_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_ctrl_recv &rArr; usbd_ept_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
</UL>

<P><STRONG><a name="[ed]"></a>usbd_ctrl_recv_status</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ctrl_recv_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usbd_ctrl_recv_status &rArr; usbd_ept_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
</UL>

<P><STRONG><a name="[c2]"></a>usbd_ctrl_send</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_ctrl_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_class_setup_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_class_setup_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_status
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_configuration
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
</UL>

<P><STRONG><a name="[e6]"></a>usbd_ctrl_send_status</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ctrl_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_feature
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_feature
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_interface_request
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_out_handler
</UL>

<P><STRONG><a name="[c3]"></a>usbd_ctrl_unsupport</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ctrl_unsupport))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_ctrl_unsupport &rArr; usbd_set_stall &rArr; usb_ept_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_class_setup_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_class_setup_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_status
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_configuration
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_feature
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_interface_request
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[fb]"></a>usbd_device_request</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_device_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_feature
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_status
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_configuration
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_feature
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[ef]"></a>usbd_disconnect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[fd]"></a>usbd_endpoint_request</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, usbd_sdr.o(i.usbd_endpoint_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = usbd_endpoint_request &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_stall
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[106]"></a>usbd_enter_suspend</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_enter_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_enter_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_suspend_status_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stop_phy_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_suspend_handler
</UL>

<P><STRONG><a name="[109]"></a>usbd_enumdone_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_int.o(i.usbd_enumdone_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_enumdone_handler &rArr; usbd_ept_open &rArr; usb_ept_open
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept0_setup
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_open
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[c4]"></a>usbd_ept_close</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_ept_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ept_close &rArr; usb_ept_close
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_clear_handler
</UL>

<P><STRONG><a name="[c6]"></a>usbd_ept_open</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_ept_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usbd_ept_open &rArr; usb_ept_open
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_open
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_init_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enumdone_handler
</UL>

<P><STRONG><a name="[c7]"></a>usbd_ept_recv</STRONG> (Thumb, 276 bytes, Stack size 28 bytes, usbd_core.o(i.usbd_ept_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_ept_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_init_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv_status
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_out_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
</UL>

<P><STRONG><a name="[ec]"></a>usbd_ept_send</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, usbd_core.o(i.usbd_ept_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
</UL>

<P><STRONG><a name="[f6]"></a>usbd_fifo_alloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_fifo_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_tx_fifo
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[c5]"></a>usbd_get_recv_len</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_get_recv_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_get_recv_len
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_out_handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_ept0_rx_handler
</UL>

<P><STRONG><a name="[11b]"></a>usbd_incomisioin_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_int.o(i.usbd_incomisioin_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_incomisioin_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[11c]"></a>usbd_incomisoout_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_int.o(i.usbd_incomisoout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_incomisoout_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[10f]"></a>usbd_inept_handler</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, usbd_int.o(i.usbd_inept_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbd_inept_handler &rArr; usbd_core_in_handler &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_all_in_interrupt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_in_interrupt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_in_clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_empty_txfifo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[b0]"></a>usbd_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, usb_core.o(i.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usbd_init &rArr; usbd_core_init &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_select_core
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_User_init
</UL>

<P><STRONG><a name="[fc]"></a>usbd_interface_request</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_interface_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_interface_request &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[95]"></a>usbd_irq_handler</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, usbd_int.o(i.usbd_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = usbd_irq_handler &rArr; usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_get_all_interrupt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_clear_interrupt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_wakeup_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_suspend_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_sof_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_rxflvl_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_incomisoout_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_incomisioin_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enumdone_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTGFS1_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>usbd_outept_handler</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, usbd_int.o(i.usbd_outept_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_all_out_interrupt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_out_interrupt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_out_clear
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_out_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[118]"></a>usbd_reset_handler</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, usbd_int.o(i.usbd_reset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_reset_handler &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept0_start
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_address
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_tx_fifo
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[11a]"></a>usbd_rxflvl_handler</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, usbd_int.o(i.usbd_rxflvl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_rxflvl_handler &rArr; usb_read_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_read_packet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[fe]"></a>usbd_set_stall</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_set_stall &rArr; usb_ept_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
</UL>

<P><STRONG><a name="[fa]"></a>usbd_setup_request_parse</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_sdr.o(i.usbd_setup_request_parse))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[119]"></a>usbd_sof_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_int.o(i.usbd_sof_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_sof_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[11e]"></a>usbd_suspend_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_int.o(i.usbd_suspend_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_suspend_handler &rArr; usbd_enter_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enter_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[11d]"></a>usbd_wakeup_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_int.o(i.usbd_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_wakeup_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_open_phy_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e5]"></a>usbd_clear_feature</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_clear_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_clear_feature &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[103]"></a>usbd_get_configuration</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_get_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbd_get_configuration &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[102]"></a>usbd_get_descriptor</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, usbd_sdr.o(i.usbd_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[ff]"></a>usbd_get_status</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbd_get_status &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[101]"></a>usbd_set_address</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_sdr.o(i.usbd_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usbd_set_address &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[104]"></a>usbd_set_configuration</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_set_configuration &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[100]"></a>usbd_set_feature</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_set_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_set_feature &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[c1]"></a>cdc_class_setup_handler</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, cdc_keyboard_class.o(i.cdc_class_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = cdc_class_setup_handler &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
</UL>

<P><STRONG><a name="[1]"></a>class_clear_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cdc_keyboard_class.o(i.class_clear_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = class_clear_handler &rArr; usbd_ept_close &rArr; usb_ept_close
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_class.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>class_ept0_rx_handler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cdc_keyboard_class.o(i.class_ept0_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = class_ept0_rx_handler &rArr; usbd_get_recv_len
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_recv_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_class.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>class_ept0_tx_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cdc_keyboard_class.o(i.class_ept0_tx_handler))
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_class.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>class_event_handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cdc_keyboard_class.o(i.class_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_class.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>class_in_handler</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, cdc_keyboard_class.o(i.class_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = class_in_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_class.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>class_init_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cdc_keyboard_class.o(i.class_init_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = class_init_handler &rArr; usbd_ept_open &rArr; usb_ept_open
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_class.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>class_out_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, cdc_keyboard_class.o(i.class_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = class_out_handler &rArr; usbd_get_recv_len
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_recv_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_class.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>class_setup_handler</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, cdc_keyboard_class.o(i.class_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = class_setup_handler &rArr; keyboard_class_setup_handler &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_class_setup_handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_class_setup_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_class.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>class_sof_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cdc_keyboard_class.o(i.class_sof_handler))
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_class.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>keyboard_class_setup_handler</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, cdc_keyboard_class.o(i.keyboard_class_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = keyboard_class_setup_handler &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
</UL>

<P><STRONG><a name="[12]"></a>get_device_config_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cdc_keyboard_desc.o(i.get_device_config_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_device_config_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_desc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>get_device_configuration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdc_keyboard_desc.o(i.get_device_configuration))
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_desc.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>get_device_descriptor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdc_keyboard_desc.o(i.get_device_descriptor))
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_desc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>get_device_interface_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cdc_keyboard_desc.o(i.get_device_interface_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_device_interface_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_desc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>get_device_lang_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdc_keyboard_desc.o(i.get_device_lang_id))
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_desc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>get_device_manufacturer_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cdc_keyboard_desc.o(i.get_device_manufacturer_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_device_manufacturer_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_desc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>get_device_other_speed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdc_keyboard_desc.o(i.get_device_other_speed))
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_desc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>get_device_product_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cdc_keyboard_desc.o(i.get_device_product_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_device_product_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_desc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>get_device_qualifier</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdc_keyboard_desc.o(i.get_device_qualifier))
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_desc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>get_device_serial_string</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cdc_keyboard_desc.o(i.get_device_serial_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_device_serial_string &rArr; get_serial_num &rArr; usbd_int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_keyboard_desc.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>get_serial_num</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cdc_keyboard_desc.o(i.get_serial_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_serial_num &rArr; usbd_int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_serial_string
</UL>

<P><STRONG><a name="[d1]"></a>usbd_int_to_unicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, cdc_keyboard_desc.o(i.usbd_int_to_unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_num
</UL>

<P><STRONG><a name="[cf]"></a>usbd_unicode_convert</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, cdc_keyboard_desc.o(i.usbd_unicode_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_unicode_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_product_string
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_manufacturer_string
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_interface_string
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_config_string
</UL>

<P><STRONG><a name="[af]"></a>usb_clock48m_select</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_user.o(i.usb_clock48m_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_clock48m_select
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_User_init
</UL>

<P><STRONG><a name="[ad]"></a>usb_gpio_config</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usb_user.o(i.usb_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usb_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_User_init
</UL>

<P><STRONG><a name="[ae]"></a>usb_low_power_wakeup_config</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usb_user.o(i.usb_low_power_wakeup_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_low_power_wakeup_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_User_init
</UL>

<P><STRONG><a name="[86]"></a>LCD_Delay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(i.LCD_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[94]"></a>Mode_User_index</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, mode.o(i.Mode_User_index))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Index
</UL>

<P><STRONG><a name="[ac]"></a>Get_RXD</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mode_uart.o(i.Get_RXD))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
